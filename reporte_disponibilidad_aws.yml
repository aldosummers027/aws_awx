---
- name: Generar Reporte de Disponibilidad de Instancias AWS
  hosts: all
  gather_facts: no
  connection: local

  vars:
    report_path: "/tmp/reporte_disponibilidad.csv"
    periodo_segundos: 300  # 5 minutos
    dias_reporte: 30

  tasks:
    - name: "Crear encabezado del archivo CSV"
      lineinfile:
        path: "{{ report_path }}"
        line: "Instance ID,Instance Name,Horas Encendido (30d),Disponibilidad (%)"
        create: yes
        mode: '0644'
      delegate_to: localhost
      run_once: true

    - name: "Consultar mÃ©tricas de CloudWatch para cada instancia"
      ansible.builtin.command: >
        aws cloudwatch get-metric-statistics
        --namespace AWS/EC2
        --metric-name CPUUtilization
        --dimensions Name=InstanceId,Value={{ hostvars[inventory_hostname].ec2_instance_id }}
        --start-time {{ (lookup('pipe', 'date -u -d \"' + dias_reporte | string + ' days ago\" +%Y-%m-%dT%H:%M:%SZ')) }}
        --end-time {{ (lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ')) }}
        --period {{ periodo_segundos }}
        --statistics SampleCount
      register: cloudwatch_data
      delegate_to: localhost
      changed_when: false

    - name: "Procesar datos y calcular disponibilidad"
      vars:
        # Sumamos todos los puntos de datos. Cada punto representa 5 minutos en estado 'running'.
        total_datapoints: "{{ (cloudwatch_data.stdout | from_json).Datapoints | sum(attribute='SampleCount') | int }}"
        minutos_encendido: "{{ total_datapoints * (periodo_segundos / 60) }}"
        horas_encendido: "{{ '%.2f' | format(minutos_encendido / 60) }}"

        total_horas_periodo: "{{ dias_reporte * 24 }}"
        porcentaje_disponibilidad: "{{ '%.2f' | format((horas_encendido | float / total_horas_periodo | float) * 100) }}"

      lineinfile:
        path: "{{ report_path }}"
        line: >-
          {{ hostvars[inventory_hostname].ec2_instance_id }},
          {{ hostvars[inventory_hostname].ec2_tag_Name | default(inventory_hostname) }},
          {{ horas_encendido }},
          {{ porcentaje_disponibilidad }}%
      delegate_to: localhost

    - name: "Subir el reporte a un bucket S3 Compatible"
      community.aws.s3_object:
        bucket: "awx"
        object: "reportes/disponibilidad-{{ lookup('pipe', 'date +%Y-%m-%d') }}.csv"
        src: "{{ report_path }}"
        mode: put
        aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        endpoint_url: "http://172.17.0.1:9000"  # <-- Si usas S3 compatible
      delegate_to: localhost
      run_once: true
